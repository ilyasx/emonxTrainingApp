#our web app framework!

#you could also generate a skeleton from scratch via
#http://flask-appbuilder.readthedocs.io/en/latest/installation.html

#Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the
#HTML escaping on your own to keep the application secure. Because of that Flask configures the Jinja2 template engine 
#for you automatically.
#requests are objects that flask handles (get set post, etc)
from flask import Flask, render_template,request
import re
from datetime import datetime
#scientific computing library for saving, reading, and resizing images
#from load import * 
#initalize our flask app
app = Flask(__name__)
#global vars for easy reusability


def convertImage(imgData1):
	imgstr = re.search(r'base64,(.*)',imgData1).group(1)
	#print(imgstr)
	folder="upload/"
	cTime = datetime.now().strftime('%Y-%m-%d_%H:%M:%S')
	filename=folder+str(cTime)+"_square.png"
	with open(filename,'wb') as output:
		output.write(imgstr.decode('base64'))

@app.route('/')
def index():
	#initModel()
	#render out pre-built HTML file right on the index page
	question = "Draw a square ?"
	return render_template("index.html",var=question)

@app.route('/predict/',methods=['GET','POST'])
def predict():
	#whenever the predict method is called, we're going
	#to input the user drawn character as an image into the model
	#perform inference, and return the classification
	#get the raw data format of the image
	imgData = request.get_data()
	#encode it into a suitable format
	convertImage(imgData)
	print "debug"
	#read the image into memory
#	x = imread('output.png',mode='L')
	#compute a bit-wise inversion so black becomes white and vice versa
#	x = np.invert(x)
	#make it the right size
#	x = imresize(x,(28,28))
	#imshow(x)
	#convert to a 4D tensor to feed into our model
#	x = x.reshape(1,28,28,1)
#	print "debug2"
	#in our computation graph
#	with graph.as_default():
		#perform the prediction
#		out = model.predict(x)
#		print(out)
#		print(np.argmax(out,axis=1))
#		print "debug3"
#		#convert the response to a string
#		response = np.array_str(np.argmax(out,axis=1))
		#return response
	return "image save"	
	

if __name__ == "__main__":
	#decide what port to run the app in
	port = 5000
	#run the app locally on the givn port
	app.run(host='0.0.0.0', port=port,debug=True)
	#optional if we want to run in debugging mode
	#app.run(debug=True)
